# NGINX mTLS front proxy for Summit.OS services
# Extracts org_id from client certificate OU field and forwards to backend
# Place your CA and server certs in infra/proxy/certs:
# - /certs/ca.crt (CA certificate to validate clients)
# - /certs/server.crt (server certificate)
# - /certs/server.key (server private key)
# Then run with compose profile: mtls

worker_processes  1;

events {
  worker_connections  1024;
}

http {
  upstream backend_api {
    server api-gateway:8000;
  }

  # Extract org_id from OU field in client certificate
  # SSL DN format: /C=US/ST=CA/L=SF/O=Summit.OS/OU=org1/CN=client-org1
  map $ssl_client_s_dn $org_id {
    default "";
    ~OU=(?<ou>[^/]+) $ou;
  }

  server {
    listen              8443 ssl;
    server_name         summit-api;

    ssl_certificate     /certs/server.crt;
    ssl_certificate_key /certs/server.key;
    ssl_client_certificate /certs/ca.crt;
    ssl_verify_client   on;
    ssl_verify_depth    2;

    # Access logging with org_id
    log_format mtls_access '$remote_addr - $org_id [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent"';
    access_log /var/log/nginx/access.log mtls_access;

    location / {
      # Reject requests without valid org_id
      if ($org_id = "") {
        return 403 "Client certificate must include OU field for org_id";
      }

      # Forward client identity headers to backend
      proxy_set_header X-Client-DN $ssl_client_s_dn;
      proxy_set_header X-Org-ID $org_id;
      proxy_set_header X-Client-Cert-Verified $ssl_client_verify;
      
      # Standard proxy headers
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://backend_api;
    }

    # Health check endpoint (no auth required for internal health checks)
    location /health {
      proxy_pass http://backend_api/health;
    }
  }
}
