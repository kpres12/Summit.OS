version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: summit-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgis/postgis:15-3.3
    container_name: summit-postgres
    environment:
      POSTGRES_DB: summit_os
      POSTGRES_USER: summit
      POSTGRES_PASSWORD: summit_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U summit -d summit_os"]
      interval: 10s
      timeout: 5s
      retries: 5

  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: summit-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Summit.OS Services
  fabric:
    build:
      context: ../../apps/fabric
      dockerfile: Dockerfile
    container_name: summit-fabric
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER=mqtt
      - MQTT_PORT=1883
    depends_on:
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
    volumes:
      - ../../apps/fabric:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

  fusion:
    build:
      context: ../../apps/fusion
      dockerfile: Dockerfile
    container_name: summit-fusion
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER=mqtt
      - MQTT_PORT=1883
      - POSTGRES_URL=postgresql://summit:summit_password@postgres:5432/summit_os
      - OBSERVATION_SCHEMA_PATH=/contracts/jsonschemas/observation.schema.json
      - FUSION_ENABLE_VISION_AI=${FUSION_ENABLE_VISION_AI-false}
      - MODEL_REGISTRY=${MODEL_REGISTRY-/models}
      - FUSION_MODEL_PATH=${FUSION_MODEL_PATH-}
      - FUSION_CONF_THRESHOLD=${FUSION_CONF_THRESHOLD-0.6}
    depends_on:
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ../../apps/fusion:/app
      - ../../packages/contracts:/contracts
      - ../../models:/models
    command: uvicorn main:app --host 0.0.0.0 --port 8002 --reload

  intelligence:
    build:
      context: ../../apps/intelligence
      dockerfile: Dockerfile
    container_name: summit-intelligence
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER=mqtt
      - MQTT_PORT=1883
      - POSTGRES_URL=postgresql://summit:summit_password@postgres:5432/summit_os
      - INTELLIGENCE_ENABLE_XGB=${INTELLIGENCE_ENABLE_XGB-false}
      - MODEL_REGISTRY=${MODEL_REGISTRY-/models}
      - INTELLIGENCE_MODEL_PATH=${INTELLIGENCE_MODEL_PATH-}
    depends_on:
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ../../apps/intelligence:/app
      - ../../models:/models
    command: uvicorn main:app --host 0.0.0.0 --port 8003 --reload

  tasking:
    build:
      context: ../../apps/tasking
      dockerfile: Dockerfile
      args:
        INCLUDE_PYMAVLINK: ${INCLUDE_PYMAVLINK-false}
    container_name: summit-tasking
    ports:
      - "8004:8004"
    environment:
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER=mqtt
      - MQTT_PORT=1883
      - POSTGRES_URL=postgresql://summit:summit_password@postgres:5432/summit_os
      - TASKING_DIRECT_AUTOPILOT=${TASKING_DIRECT_AUTOPILOT-false}
    depends_on:
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ../../apps/tasking:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8004 --reload

  # API Gateway
  api-gateway:
    build:
      context: ../../apps/api-gateway
      dockerfile: Dockerfile
    container_name: summit-api-gateway
    ports:
      - "8000:8000"
    environment:
      - FABRIC_URL=http://fabric:8001
      - FUSION_URL=http://fusion:8002
      - INTELLIGENCE_URL=http://intelligence:8003
      - TASKING_URL=http://tasking:8004
    depends_on:
      - fabric
      - fusion
      - intelligence
      - tasking
    volumes:
      - ../../apps/api-gateway:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # FireLine Console
  console:
    build:
      context: ../../apps/console
      dockerfile: Dockerfile
    container_name: summit-console
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
    depends_on:
      - api-gateway
    volumes:
      - ../../apps/console:/app
      - /app/node_modules
    command: npm run dev

  # Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: summit-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: summit-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  redis_data:
  postgres_data:
  grafana_data:
